#(a)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(4)
c = ClassicalRegister(4)
from numpy.random import randint
import numpy as np
# Setting the random seed
np.random.seed(seed=5) # You may choose any seed instead of just `0'
n = 4 # This is the number of bits in the string

alice_bits = randint(2, size=n)
bit_1 = str(alice_bits[0])+str(alice_bits[1])
bit_2 = str(alice_bits[2])+str(alice_bits[3])
print (bit_1,bit_2)



circuit = QuantumCircuit(q,c)
circuit.h(q[1])
circuit.cnot(q[1],q[0])
if (bit_1 == "00"): pass
elif (bit_1 == "01"):
    circuit.x(q[0])
elif (bit_1 == "10"):
    circuit.z(q[0])
elif (bit_1 == "11"):
    circuit.z(q[0])
    circuit.x(q[0])
circuit.cnot(q[0],q[1])
circuit.h(q[0])

circuit.h(q[3])
circuit.cnot(q[3],q[2])
if (bit_2 == "00"): pass
elif (bit_2 == "01"):
    circuit.x(q[2])
elif (bit_2 == "10"):
    circuit.z(q[2])
elif (bit_2 == "11"):
    circuit.z(q[2])
    circuit.x(q[2])
circuit.cnot(q[2],q[3])
circuit.h(q[2])
circuit.measure(q,c)
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
print (counts)
plot_histogram(counts)
#(b)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(4)
c = ClassicalRegister(4)
from numpy.random import randint
import numpy as np
# Setting the random seed
np.random.seed(seed=5) # You may choose any seed instead of just `0'
n = 4 # This is the number of bits in the string

alice_bits = randint(2, size=n)
bit_1 = str(alice_bits[0])+str(alice_bits[1])
bit_2 = str(alice_bits[2])+str(alice_bits[3])
print (bit_1,bit_2)



circuit = QuantumCircuit(q,c)
circuit.h(q[1])
circuit.cnot(q[1],q[0])
if (bit_1 == "00"): pass
elif (bit_1 == "01"):
    circuit.x(q[0])
elif (bit_1 == "10"):
    circuit.z(q[0])
elif (bit_1 == "11"):
    circuit.z(q[0])
    circuit.x(q[0])
circuit.cnot(q[0],q[1])
circuit.h(q[0])

circuit.h(q[3])
circuit.cnot(q[3],q[2])
if (bit_2 == "00"): pass
elif (bit_2 == "01"):
    circuit.x(q[2])
elif (bit_2 == "10"):
    circuit.z(q[2])
elif (bit_2 == "11"):
    circuit.z(q[2])
    circuit.x(q[2])
circuit.cnot(q[2],q[3])
circuit.h(q[2])
circuit.measure(q,c)
circuit.draw(output = 'mpl')
from qiskit import IBMQ
from qiskit.providers.ibmq import least_busy
shots = 256
apitoken = '8eefe7c0506a2676bcd82d6e31f408710558bf9b1c16a95108376b7c0007c4d8eca2a97a01f96d1878a11783bf0c4278571b8ddfdd8df0570f2f93c46845b45c'
IBMQ.save_account(apitoken)
# Load local account information
IBMQ.load_account()
# Get the least busy backend
provider = IBMQ.get_provider(hub='ibm-q')
backend = least_busy(provider.backends(filters=lambda x:
x.configuration().n_qubits >= 2
and not x.configuration().simulator
and x.status().operational==True))
print("least busy backend: ", backend)
# Run our circuit
job = execute(circuit, backend=backend, shots=shots)
from qiskit.tools.monitor import job_monitor
job_monitor(job)
result = job.result()
counts = result.get_counts()
print (counts)
plot_histogram(counts)
