#(a)
#(i)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(3)
c = ClassicalRegister(3)
circuit = QuantumCircuit(q,c)
circuit.h(q[2])
circuit.cnot(q[2],q[1])
circuit.initialize([1/sqrt(3),sqrt(2/3)],0)
circuit.cnot(q[0],q[1])
circuit.h(q[0])
circuit.measure(q[0],c[0])
circuit.measure(q[1],c[1])
circuit.draw(output = 'mpl')
circuit.x(q[2]).c_if(c[1], 1) # Apply gates if the registers 
circuit.z(q[2]).c_if(c[0], 1) # are in the state '1'
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator,shots = 1)
result = job.result()
counts = result.get_counts()
statevector = result.get_statevector()
print (statevector)
for i in counts:
    print(i)
plot_bloch_multivector(statevector)
#(ii)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(3)
c = ClassicalRegister(3)
circuit = QuantumCircuit(q,c)
circuit.rx(pi/3, q[0])
circuit.h(q[2])
circuit.cnot(q[2],q[1])
#circuit.initialize([1/sqrt(3),sqrt(2/3)],0)
circuit.cnot(q[0],q[1])
circuit.h(q[0])
circuit.measure(q[0],c[0])
circuit.measure(q[1],c[1])
circuit.draw(output = 'mpl')
circuit.x(q[2]).c_if(c[1], 1) # Apply gates if the registers 
circuit.z(q[2]).c_if(c[0], 1) # are in the state '1'
circuit.rx(-pi/3, q[2])
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator,shots = 1)
result = job.result()
counts = result.get_counts()
statevector = result.get_statevector()
print (statevector)
for i in counts:
    print(i)
plot_bloch_multivector(statevector)
#(iii)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q[2])
circuit.cnot(q[2],q[1])
circuit.initialize([1/sqrt(3),sqrt(2/3)],0)
circuit.cnot(q[0],q[1])
circuit.h(q[0])
circuit.measure(q[0],c[0])
circuit.measure(q[1],c[1])
circuit.draw(output = 'mpl')
circuit.x(q[2]).c_if(c[1], 1) # Apply gates if the registers 
circuit.z(q[2]).c_if(c[0], 1) # are in the state '1'
circuit.initialize([1/sqrt(3),sqrt(2/3)],3)
circuit.h(q[4])
circuit.cswap(q[4],q[3],q[2])
circuit.h(q[4])
circuit.x(q[4])
circuit.measure(q[4],c[4])
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator,shots = 1024)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(b)
